<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Echarts中Option的属性</title>
      <link href="2022/03/03/echarts-zhong-option-de-shu-xing/"/>
      <url>2022/03/03/echarts-zhong-option-de-shu-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h1><h2 id="title–标题组件"><a href="#title–标题组件" class="headerlink" title="title–标题组件"></a>title–标题组件</h2><h6 id="标题组件，包含主标题和副标题。"><a href="#标题组件，包含主标题和副标题。" class="headerlink" title="标题组件，包含主标题和副标题。"></a>标题组件，包含主标题和副标题。</h6><pre class="line-numbers language-none"><code class="language-none">title:{x:"left",    // 'left' | 'right' | 'center' | '100px'y:"4%",     // 'top' | 'bottom' | 'center' | '100px'    // 标题    show: true, //是否显示    text: "标题内容",    textStyle: {      color: "#fff", // 主标题文字的颜色。      fontStyle: "normal", // 主标题文字字体的风格。 'normal'  'italic'  'oblique'      fontWeight: "normal", // 主标题文字字体的粗细。 'normal' 'bold'  'bolder'  'lighter' 500|600      fontFamily: "sans-serif", // 主标题文字的字体系列。      fontSize: 18, // 字体大小      lineHeight: "30", // 行高      // width ... , // 文字块的宽度      // height ... , // 文字块的高度      textBorderColor: "transparent", // 文字本身的描边颜色。      textBorderWidth: 0, // 文字本身的描边宽度。      textShadowColor: "transparent", // 文字本身的阴影颜色。      textShadowBlur: 0, // 文字本身的阴影长度。      textShadowOffsetX: 0, // 文字本身的阴影 X 偏移。      textShadowOffsetY: 0, //  文字本身的阴影 Y 偏移。    },    subtext: "bb", // 副标题文本    subtextStyle: {      color: "red",      fontSize: "16",    },   //副标题样式    textAlign: "auto", //水平对齐'auto'、'left'、'right'、'center'    textVerticalAlign: "auto", // 垂直对齐  'auto'、'top'、'bottom'、'middle'    triggerEvent: false, // 是否触发事件    padding: 5, // 标题内边距  5/[5,2,4,7]    itemGap: 10, //主副标题之间的间距    left: 10, // 距离 left top right bottom    x: "center",  // 水平安放位置，默认为左对齐，可选为：'center' ¦ 'left' ¦ 'right' ¦ {number}（x坐标，单位px）    y: "4%",      // 垂直安放位置，默认为全图顶端，可选为：// 'top' ¦ 'bottom' ¦ 'center'¦ {number}（y坐标，单位px）    backgroundColor: "pink", // 标题背景色    borderColor: "#ccc", // 标题的边框颜色    borderWidth: 5, // 标题的边框线宽。    borderRadius: 2, // 圆角半径    shadowBlur: 10, //图形阴影的模糊大小    shadowColor: "rgba(0, 0, 0, 0.5)", // 阴影颜色    shadowOffsetX: 5, // 阴影水平方向上的偏移距离。    shadowOffsetY: 5, //阴影垂直方向上的偏移距离。}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="legend–图例组件"><a href="#legend–图例组件" class="headerlink" title="legend–图例组件"></a>legend–图例组件</h2><h6 id="图例组件-展现了不同系列的标记-symbol-，颜色和名字。可以通过点击图例控制哪些系列不显示。"><a href="#图例组件-展现了不同系列的标记-symbol-，颜色和名字。可以通过点击图例控制哪些系列不显示。" class="headerlink" title="图例组件,展现了不同系列的标记(symbol)，颜色和名字。可以通过点击图例控制哪些系列不显示。"></a>图例组件,展现了不同系列的标记(symbol)，颜色和名字。可以通过点击图例控制哪些系列不显示。</h6><pre class="line-numbers language-none"><code class="language-none">legend: {  show: true, //是否显示  type: "plain", // 图例的类型 'plain':普通图例  'scroll':可滚动翻页的图例  zlevel: 1, // 所有图形的 zlevel 值。  icon: "circle",  top: "5%", // bottom:"20%" // 组件离容器的距离  right: "5%", //left:"10%"  // // 组件离容器的距离  width: "auto", // 图例组件的宽度  height: "auto", // 图例组件的高度  orient: "horizontal", // 图例列表的布局朝向。 'horizontal'  'vertical'  align: "auto", // 图例标记和文本的对齐  padding: 5, // 图例内边距  itemWidth: 6, // 图例标记的图形宽度。  itemGap: 20, // 图例每项之间的间隔。  itemHeight: 14, //  图例标记的图形高度。  symbolKeepAspect: true, // 如果图标（可能来自系列的 symbol 或用户自定义的 legend.data.icon）是 path:// 的形式，是否在缩放时保持该图形的长宽比。  formatter: function (name) {    return '{a|text}{a|   }{b|' +  name + '}'  },  selectedMode: true, // 图例选择的模式，  inactiveColor: "#ccc", // 图例关闭时的颜色。  textStyle: {    color: "#556677", // 文字的颜色。    fontStyle: "normal", // 文字字体的风格。    fontWeight: "normal", // 文字字体的粗细。 'normal' 'bold'  'bolder' 'lighter'  100 | 200 | 300 | 400...    fontFamily: "sans-serif", // 文字的字体系列。    fontSize: 12, // 文字的字体大小。    lineHeight: 20, // 行高。    backgroundColor: "transparent", // 文字块背景色。    borderColor: "transparent", // 文字块边框颜色。    borderWidth: 0, // 文字块边框宽度。    borderRadius: 0, // 文字块的圆角。    padding: 0, // 文字块的内边距    shadowColor: "transparent", // 文字块的背景阴影颜色    shadowBlur: 0, // 文字块的背景阴影长度。    shadowOffsetX: 0, // 文字块的背景阴影 X 偏移。    shadowOffsetY: 0, // 文字块的背景阴影 Y 偏移。    // width: 50, // 文字块的宽度。 默认    // height: 40, // 文字块的高度 默认    textBorderColor: "transparent", // 文字本身的描边颜色。    textBorderWidth: 0, // 文字本身的描边宽度。    textShadowColor: "transparent", // 文字本身的阴影颜色。    textShadowBlur: 0, // 文字本身的阴影长度。    textShadowOffsetX: 0, // 文字本身的阴影 X 偏移。    textShadowOffsetY: 0, // 文字本身的阴影 Y 偏移。    rich: {    a: {      color: "red",      lineHeight: 10,    },     b: {      color: "#fff",      lineHeight: 10,    },  }, // 自定富文本样式  },}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="tooltip–提示框组件"><a href="#tooltip–提示框组件" class="headerlink" title="tooltip–提示框组件"></a>tooltip–提示框组件</h2><h6 id="提示框组件-可以设置在多种地方："><a href="#提示框组件-可以设置在多种地方：" class="headerlink" title="提示框组件,可以设置在多种地方："></a>提示框组件,可以设置在多种地方：</h6><p>可以设置在全局，即 tooltip<br>可以设置在坐标系中，即 grid.tooltip、polar.tooltip、single.tooltip<br>可以设置在系列中，即 series.tooltip<br>可以设置在系列的每个数据项中，即 series.data.tooltip</p><pre class="line-numbers language-none"><code class="language-none">tooltip ={                                  //提示框组件    trigger: 'item',                        //触发类型,'item'数据项图形触发，主要在散点图，饼图等无类目轴的图表中使用。 'axis'坐标轴触发，主要在柱状图，折线图等会使用类目轴的图表中使用。    triggerOn:"mousemove",                  //提示框触发的条件,'mousemove'鼠标移动时触发。'click'鼠标点击时触发。'mousemove|click'同时鼠标移动和点击时触发。'none'不在 'mousemove' 或 'click' 时触发    showContent:true,                       //是否显示提示框浮层    alwaysShowContent:true,                 //是否永远显示提示框内容    showDelay:0,                            //浮层显示的延迟，单位为 ms    hideDelay:100,                          //浮层隐藏的延迟，单位为 ms    enterable:false,                        //鼠标是否可进入提示框浮层中    confine:false,                          //是否将 tooltip 框限制在图表的区域内    transitionDuration:0.4,                 //提示框浮层的移动动画过渡时间，单位是 s,设置为 0 的时候会紧跟着鼠标移动    position:['50%', '50%'],                //提示框浮层的位置，默认不设置时位置会跟随鼠标的位置,[10, 10],回掉函数，inside鼠标所在图形的内部中心位置，top、left、bottom、right鼠标所在图形上侧，左侧，下侧，右侧，    formatter:"{b0}: {c0}&lt;br /&gt;{b1}: {c1}", //提示框浮层内容格式器，支持字符串模板和回调函数两种形式,模板变量有 {a}, {b}，{c}，{d}，{e}，分别表示系列名，数据名，数据值等    backgroundColor:"transparent",          //标题背景色    borderColor:"#ccc",                     //边框颜色    borderWidth:0,                          //边框线宽    padding:5,                              //图例内边距，单位px  5  [5, 10]  [5,10,5,10]    textStyle:mytextStyle,                  //文本样式    axisPointer: {                          // 鼠标放在      type: 'cross', //默认为line，line直线，cross十字准星，shadow阴影      crossStyle: {              color: '#fff'      }    },    formatter: function (value) {      for (var i = 0; i &lt; value.length; i++) {        return (          value[i].seriesName +          "&lt;br/&gt;" +          value[i].name +          unit +          "：" +          value[i].value +          "%"        );      }    },};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="grid–可用于调整图例在整个容器中的占位"><a href="#grid–可用于调整图例在整个容器中的占位" class="headerlink" title="grid–可用于调整图例在整个容器中的占位"></a>grid–可用于调整图例在整个容器中的占位</h2><p>直角坐标系内绘图网格，单个 grid 内最多可以放置上下两个 X 轴，左右两个 Y 轴。可以在网格上绘制折线图，柱状图，散点图（气泡图）。也可用于调整图例在整个容器中的占位</p><pre class="line-numbers language-none"><code class="language-none">grid:{x: 80,   //top:"15%" | right:"3%" | left:"2%" | bottom:"12%"  y: 60,  x2: 80,  y2: 60,  // width: {totalWidth} - x - x2,  // height: {totalHeight} - y - y2,  backgroundColor: ‘rgba(0,0,0,0)‘,  borderWidth: 1,  borderColor: '#ccc',  containLabel: true, //防止坐标轴标签溢出}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="xAxis–x-轴"><a href="#xAxis–x-轴" class="headerlink" title="xAxis–x 轴"></a>xAxis–x 轴</h2><p>直角坐标系 grid 中的 x 轴，一般情况下单个 grid 组件最多只能放上下两个 x 轴，多于两个 x 轴需要通过配置 offset 属性防止同个位置多个 x 轴的重叠。</p><pre class="line-numbers language-none"><code class="language-none">xAxis: {  boundaryGap: false,// 刻度离纵轴有无间隙，默认true有间距  type: 'category', //'value' 数值轴，适用于连续数据。 'category' 类目轴，适用于离散的类目数据，为该类型时必须通过 data 设置类目数据。 'time' 时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同，例如会根据跨度的范围来决定使用月，星期，日还是小时范围的刻度。 'log' 对数轴。适用于对数数据。  position:'bottom',  // 'bottom' | 'top'  name: '(ETD)',// 横轴名称  nameTextStyle:{    fontSize:12,    fontWeight:'bold',    color:'#ff0033',    //align:'left',  },  nameLocation:'middle',//坐标轴的位置 'start' | 'center' | 'end'  nameGap:50,//坐标轴名称与轴线之间的距离  nameRotate:90,//坐标轴名字旋转角度值,  axisLabel : {//坐标轴刻度标签的相关设置。      // clickable:true,//并给图表添加单击事件  根据返回值判断点击的是哪里      interval: 0,      inside:false, //  标签朝内还是朝外      rotate: 40,// 文字倾斜度      textStyle:{      color:'#fff,      fontSize:'20px',      align:'center'      }  },  axisLine:{    lineStyle:{      color:'red'   //x轴颜色    },    symbol:['none','arrow'], //轴线两边的箭头    symbolSize:[8, 12]  //箭头大小  },  data: ['2020-07-08 周三','2020-07-09 周四',].map((str) =&gt; {      return str.replace(' ','\n')  }),// 横轴坐标值  // data: [{value:'1',textStyle:{            color:'#ff0033',        }}, '2/7', '3', '4', '5', '6', '7']//每一项也可以是具体的配置项，此时取配置项中的 `value` 为类目名  splitLine: {  show: false，  lineStyle:{  //属性lineStyle（详见lineStyle）控制线条样式color:['#ccc'],width:1,type:'solid'}  },  // 取消X轴的网格  splitArea:{   //分隔区域    show:true,    areaStyle:{color:['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)'],}  },  axisTick: {  // 显示隐藏刻度线   inside:true, //刻度朝内还是朝外   alignWithLabel: true   // 刻度线是否显示  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="yAxis-y-轴"><a href="#yAxis-y-轴" class="headerlink" title="yAxis-y 轴"></a>yAxis-y 轴</h2><p>直角坐标系 grid 中的 y 轴，一般情况下单个 grid 组件最多只能放左右两个 y 轴，多于两个 y 轴需要通过配置 offset 属性防止同个位置多个 Y 轴的重叠。</p><pre class="line-numbers language-none"><code class="language-none">yAxis: {   type: 'value',   name: "         金额( 单位: 万元 )",   nameTextStyle: {     color: '#ffffff'   },   axisLine: {     show: false,     lineStyle: {       type: 'dashed',       color: 'rgba(135,140,147,0.8)'     }，     axisLabel: {       show: true,       textStyle: {         color: "#fff",         fontSize: "16",       },       formatter:function(value){     //设置Y轴显示的名字，超出做..隐藏         var res = value;         if(res.length &gt;7){           res = res.substring(0,6) + ".."         }         return res;       }     },   },   splitLine: {     show: true,     lineStyle: {       type: 'dashed',   //背景线为虚线       color: 'rgba(135,140,147,.8)' //左侧显示线     }   },   axisLabel: {     formatter: '{value}',     color: '#fff',     fontSize: 14   } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="series-line–折线-面积图"><a href="#series-line–折线-面积图" class="headerlink" title="series-line–折线/面积图"></a>series-line–折线/面积图</h2><p>折线图是用折线将各个数据点标志连接起来的图表，用于展现数据的变化趋势。可用于直角坐标系和极坐标系上。</p><pre class="line-numbers language-none"><code class="language-none">line: {  itemStyle: {       normal: {           // color: 各异,           label: {               show: false               // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为               //           'inside'|'left'|'right'|'top'|'bottom'               // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE           },           lineStyle: {               width: 2,               type: 'solid',               normal: {               //线的渐变颜色                color: new echarts.graphic.LinearGradient(0, 0, 0, 0.7, [                          {                    offset: 0,                    color: "#24D5CC",                  },                  {                    offset: 1,                    color: "#7A50F1",                  },                ]),                opacity: 0.75,              },               shadowColor: 'rgba(0,0,0,0)', //默认透明  阴影               shadowBlur: 5,               shadowOffsetX: 3,               shadowOffsetY: 3           }，           itemStyle: {              normal: {                lineStyle: {                  width: 3, //设置线条粗细                },              },            },          areaStyle: {   //折线图覆盖面积                  color: new echarts.graphic.LinearGradient(0, 1, 0, 0, [                    {                      offset: 0,                      color: "rgba(255,80,124,0)",                    },                    {                      offset: 1,                      color: "rgba(255,80,124,0.35)",                    },                  ]),    //渐变色                },       },       emphasis: {   // 鼠标移入           // color: 各异,           label: {               show: false               // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为               //           'inside'|'left'|'right'|'top'|'bottom'               // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE           }       }   },   //smooth : false,  //是否平滑   //symbol: null,         // 拐点图形类型,可以自己设置图片   symbolSize: 2, // 拐点图形大小   symbolOffset: ["0", "-8"],//拐点位置   //symbolRotate : null,  // 拐点图形旋转控制   showAllSymbol: false // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="series-bar–柱状图"><a href="#series-bar–柱状图" class="headerlink" title="series-bar–柱状图"></a>series-bar–柱状图</h2><p>柱状图（或称条形图）是一种通过柱形的高度（横向的情况下则是宽度）来表现数据大小的一种常用图表类型。</p><pre class="line-numbers language-none"><code class="language-none">bar:{barMinHeight: 0, // 最小高度改为0    // barWidth: null,        // 默认自适应    barGap: '30%', // 柱间距离，默认为柱形宽度的30%，可设固定值    barCategoryGap: '20%', // 类目间柱形距离，默认为类目间距的20%，可设固定值    itemStyle: {        normal: {            // color: '各异',            barBorderColor: '#fff', // 柱条边线            barBorderRadius: 0, // 柱条边线圆角，单位px，默认为0            barBorderWidth: 1, // 柱条边线线宽，单位px，默认为1            label: {  //z柱状图上显示数字                show: false                // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为                //           'inside'|'left'|'right'|'top'|'bottom'                // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE            }        },        emphasis: {   // 鼠标移入的样式            // color: '各异',            barBorderColor: 'rgba(0,0,0,0)', // 柱条边线            barBorderRadius: 0, // 柱条边线圆角，单位px，默认为0            barBorderWidth: 1, // 柱条边线线宽，单位px，默认为1            label: {                show: false                // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为                //           'inside'|'left'|'right'|'top'|'bottom'                // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="series-pie–饼图"><a href="#series-pie–饼图" class="headerlink" title="series-pie–饼图"></a>series-pie–饼图</h2><p>饼图主要用于表现不同类目的数据在总和中的占比。每个的弧度表示数据数量的比例。</p><pre class="line-numbers language-none"><code class="language-none">// 横向柱状图series: [  {    type: "pie",    radius: ["45%", "60%"],    center: this.center,    data: echartData,    hoverAnimation: false,    itemStyle: {      normal: {        borderColor: bgColor,        borderWidth: 2      }    },    labelLine: {      normal: {        length: 20,        // length2: 100,        lineStyle: {          color: "#999"        }      }    },    label: {      normal: {      //https://echarts.apache.org/zh/option.html#grid.tooltip.formatter      //{a},{b},{c},{d}各代表不同的值      // formatter: "{font|{b}}\n{hr|}\n{font|{d}%}",        formatter: params =&gt; {          return (            "{icon|●}{name|" +            params.name +            "}{value|" +            formatNumber(params.value) +            "}"          );        },        padding: [0, 0, 0, 0],        rich: {          icon: {            fontSize: 16          },          name: {            fontSize: 14,            padding: [0, 10, 0, 4],            color: "#666"          },          value: {            fontSize: 16,            fontWeight: "bold",            color: "#666"          },          hr: {            height: 0,            borderWidth: 1,            width: "100%",            borderColor: "#999"          }        }      }    }  }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.cnblogs.com/nthforsth/p/15253115.html">来源自落花桂</a></p>]]></content>
      
      
      <categories>
          
          <category> Option属性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发常用工具</title>
      <link href="2021/09/01/kai-fa-chang-yong-gong-ju/"/>
      <url>2021/09/01/kai-fa-chang-yong-gong-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="开发常用工具"><a href="#开发常用工具" class="headerlink" title="开发常用工具"></a>开发常用工具</h1><table><thead><tr><th align="center">名称</th><th align="center">地址</th></tr></thead><tbody><tr><td align="center">配色</td><td align="center"><a href="https://webgradients.com/">https://webgradients.com/</a></td></tr><tr><td align="center">格式化校验</td><td align="center"><a href="https://www.bejson.com/">https://www.bejson.com/</a></td></tr><tr><td align="center">在线生成二维码</td><td align="center"><a href="https://cli.im/">https://cli.im/</a></td></tr><tr><td align="center">安卓在线生成keystore</td><td align="center"><a href="http://www.applicationloader.net/appuploader/keystore.php">http://www.applicationloader.net/appuploader/keystore.php</a></td></tr><tr><td align="center">路过图床</td><td align="center"><a href="https://imgtu.com/">https://imgtu.com/</a></td></tr><tr><td align="center">聚合图床</td><td align="center"><a href="https://www.superbed.cn/">https://www.superbed.cn/</a></td></tr><tr><td align="center">字体图标库</td><td align="center"><a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></td></tr><tr><td align="center">css动画库</td><td align="center"><a href="https://animate.style/">https://animate.style/</a></td></tr><tr><td align="center">高清大图（免费素材）</td><td align="center"><a href="https://wallroom.io/">https://wallroom.io/</a></td></tr><tr><td align="center">高清图库</td><td align="center"><a href="https://www.pexels.com/">https://www.pexels.com/</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 开发常用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的使用</title>
      <link href="2021/05/20/git-de-shi-yong/"/>
      <url>2021/05/20/git-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="git下载及常用命令"><a href="#git下载及常用命令" class="headerlink" title="git下载及常用命令"></a>git下载及常用命令</h1><h2 id="git下载"><a href="#git下载" class="headerlink" title="git下载"></a>git下载</h2><p><a href="https://git-scm.com/downloads">git下载</a></p><p><a href="https://zhuanlan.zhihu.com/p/87812360">git详细安装教程</a></p><h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><h4 id="将服务器上的代码给拉下来"><a href="#将服务器上的代码给拉下来" class="headerlink" title="将服务器上的代码给拉下来"></a>将服务器上的代码给拉下来</h4><pre class="line-numbers language-none"><code class="language-none">$ git clone + 地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="将服务器上的代码给拉下来并切换到目标分支"><a href="#将服务器上的代码给拉下来并切换到目标分支" class="headerlink" title="将服务器上的代码给拉下来并切换到目标分支"></a>将服务器上的代码给拉下来并切换到目标分支</h4><pre class="line-numbers language-none"><code class="language-none">$ git checkout -b 目标分支 地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="切换到指定分支"><a href="#切换到指定分支" class="headerlink" title="切换到指定分支"></a>切换到指定分支</h4><pre class="line-numbers language-none"><code class="language-none">$ git checkout 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="添加当前目录的所有文件到暂存区"><a href="#添加当前目录的所有文件到暂存区" class="headerlink" title="添加当前目录的所有文件到暂存区"></a>添加当前目录的所有文件到暂存区</h4><pre class="line-numbers language-none"><code class="language-none">$ git add .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="提交暂存区到仓库区"><a href="#提交暂存区到仓库区" class="headerlink" title="提交暂存区到仓库区"></a>提交暂存区到仓库区</h4><pre class="line-numbers language-none"><code class="language-none">$ git commit -m 'message'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="将本地分支推送到服务器上去。"><a href="#将本地分支推送到服务器上去。" class="headerlink" title="将本地分支推送到服务器上去。"></a>将本地分支推送到服务器上去。</h4><pre class="line-numbers language-none"><code class="language-none">$ git push<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看本地所有分支"><a href="#查看本地所有分支" class="headerlink" title="查看本地所有分支"></a>查看本地所有分支</h4><pre class="line-numbers language-none"><code class="language-none">$ git branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="列出所有远程分支"><a href="#列出所有远程分支" class="headerlink" title="列出所有远程分支"></a>列出所有远程分支</h4><pre class="line-numbers language-none"><code class="language-none">$ git branch -r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="本地与服务器端同步"><a href="#本地与服务器端同步" class="headerlink" title="本地与服务器端同步"></a>本地与服务器端同步</h4><pre class="line-numbers language-none"><code class="language-none">$ git pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看用户名和邮箱地址"><a href="#查看用户名和邮箱地址" class="headerlink" title="查看用户名和邮箱地址"></a>查看用户名和邮箱地址</h4><pre class="line-numbers language-none"><code class="language-none">$ git config user.name$ git config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="修改用户名和邮箱地址"><a href="#修改用户名和邮箱地址" class="headerlink" title="修改用户名和邮箱地址"></a>修改用户名和邮箱地址</h4><pre class="line-numbers language-none"><code class="language-none">$ git config --global user.name "username"$ git config --global user.email "email"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="更多git命令"><a href="#更多git命令" class="headerlink" title="更多git命令"></a>更多git命令</h2><p>点击查看:<a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">作者阮一峰整理git命令</a><br>点击查看:<a href="https://blog.csdn.net/halaoda/article/details/78661334">作者halaoda整理git命令</a></p>]]></content>
      
      
      <categories>
          
          <category> Git常用命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>live2d动漫人</title>
      <link href="2021/05/19/live2d-dong-man-ren/"/>
      <url>2021/05/19/live2d-dong-man-ren/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客添加live2d卡通人物"><a href="#Hexo博客添加live2d卡通人物" class="headerlink" title="Hexo博客添加live2d卡通人物"></a>Hexo博客添加live2d卡通人物</h1><h3 id="安装hexo-helper-live2d"><a href="#安装hexo-helper-live2d" class="headerlink" title="安装hexo-helper-live2d"></a>安装hexo-helper-live2d</h3><pre class="line-numbers language-none"><code class="language-none">$ npm install --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="选择安装喜欢的素材包"><a href="#选择安装喜欢的素材包" class="headerlink" title="选择安装喜欢的素材包"></a>选择安装喜欢的素材包</h3><pre class="line-numbers language-none"><code class="language-none">$ npm install  live2d-widget-model-{name}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="素材包一览"><a href="#素材包一览" class="headerlink" title="素材包一览"></a>素材包一览</h3><p><kbd><a href="https://blog.csdn.net/u012931864/article/details/83054822">素材包地址https://blog.csdn.net/u012931864/article/details/83054822</a></kbd></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h2><p><img src="/img/cartoon.png" alt="koharu"></p><p>素材包地址每张图片的name就是需要替换的名字，将喜欢的卡通人物名字记住</p><pre class="line-numbers language-none"><code class="language-none">$ npm install  live2d-widget-model-koharu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置:<br>在Hexo站点配置文件_config.yml，或者主题配置文件_config.yml中添加如下配置<br>每次更换卡通人物就需要更换 live2d.model.use 的内容</p><pre class="line-numbers language-none"><code class="language-none">live2d:  enable: true  scriptFrom: local  pluginRootPath: live2dw/  pluginJsPath: lib/  pluginModelPath: assets/  tagMode: false  log: false  model:    use: live2d-widget-model-koharu  display:    position: right    width: 150    height: 300  mobile:    show: true  react:    opacity: 0.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 卡通人物 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 卡通人物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义table</title>
      <link href="2021/05/19/zi-ding-yi-biao-ge/"/>
      <url>2021/05/19/zi-ding-yi-biao-ge/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义table-用于复杂的表格样式"><a href="#自定义table-用于复杂的表格样式" class="headerlink" title="自定义table 用于复杂的表格样式"></a>自定义table 用于复杂的表格样式</h1><h2 id="简洁table"><a href="#简洁table" class="headerlink" title="简洁table"></a>简洁table</h2><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;    &lt;div id="sketchMap"&gt;        &lt;section id="sketchTable"&gt;            &lt;table style="width: 100%"&gt;                &lt;tbody&gt;                    &lt;template v-for="(group,index) in 3"&gt;                        &lt;tr v-if="index == 0"&gt;                            &lt;td&gt;表头1&lt;/td&gt;                            &lt;td&gt;表头2&lt;/td&gt;                            &lt;td&gt;表头3&lt;/td&gt;                            &lt;td&gt;表头4&lt;/td&gt;                        &lt;/tr&gt;                        &lt;template&gt;                            &lt;tr&gt;                                &lt;td&gt;表格1&lt;/td&gt;                                &lt;td&gt;表格2&lt;/td&gt;                                &lt;td&gt;表格3&lt;/td&gt;                                &lt;td&gt;表格4&lt;/td&gt;                            &lt;/tr&gt;                        &lt;/template&gt;                    &lt;/template&gt;                &lt;/tbody&gt;            &lt;/table&gt;        &lt;/section&gt;    &lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CSS样式:</p><pre class="line-numbers language-none"><code class="language-none">#sketchMap {    font-family: "宋体";    padding: 0;    margin: 0;    h4 {        font-size: 27px;        margin: 10px;        text-align: center;    }}#sketchTable {    text-align: center;    table {        border: 1px solid #E4E7ED !important;        border-collapse: collapse;        font-size: 15px;        color: #409EFF;        //   margin:20px 0;        th {            border: 1.5px solid #E4E7ED;        }        td {            border: 1px solid #E4E7ED;            width: 100px;            padding: 14px 0;        }        td:first-child {            padding-left: 5px;            width: 130px;            text-align: center;        }        tr:nth-child(2n) {            background: #F5F5F5;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图:<br><img src="/img/table.png"></p><h2 id="复杂样式"><a href="#复杂样式" class="headerlink" title="复杂样式"></a>复杂样式</h2><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;    &lt;div id="sketchMap"&gt;        &lt;h4&gt;自定义表格&lt;/h4&gt;        &lt;section id="sketchTable"&gt;            &lt;table v-for = "(group,index) in list" :key="index" style="width: 100%"&gt;                &lt;tbody&gt;                &lt;template&gt;                    &lt;tr v-if="index == 0"&gt;                    &lt;td&gt;表头1&lt;/td&gt;                    &lt;td&gt;表头2&lt;/td&gt;                    &lt;td&gt;表头3&lt;/td&gt;                    &lt;td v-for= "(item2,index2) in group.cells" :key="index2"&gt;{{item2.time}}&lt;/td&gt;                                    &lt;/tr&gt;                    &lt;template&gt;                    &lt;tr&gt;                        &lt;td style="border:none;"&gt;&lt;/td&gt;                        &lt;td&gt;name1&lt;/td&gt;                        &lt;td&gt;{{group.a}}&lt;/td&gt;                        &lt;td v-for= "(item,index) in group.cells" :key="index+'gmv'"&gt;{{item.gmv}}&lt;/td&gt;                                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td style="border:none;"&gt;&lt;/td&gt;                        &lt;td&gt;name2&lt;/td&gt;                        &lt;td&gt;{{group.b}}&lt;/td&gt;                        &lt;td v-for= "(item,index) in group.cells" :key="index+'ri'"&gt;{{item.ri}}&lt;/td&gt;                                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td style="border:none;"&gt;name&lt;/td&gt;                        &lt;td&gt;name3&lt;/td&gt;                        &lt;td&gt;{{group.c}}&lt;/td&gt;                        &lt;td v-for= "(item,index) in group.cells" :key="index+'kai'"&gt;{{item.kai}}&lt;/td&gt;                                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td style="border:none;"&gt;&lt;/td&gt;                        &lt;td&gt;name4&lt;/td&gt;                        &lt;td&gt;{{group.d}}&lt;/td&gt;                        &lt;td v-for= "(item,index) in group.cells" :key="index+'xin'"&gt;{{item.xin}}&lt;/td&gt;                                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td style="border:none;"&gt;&lt;/td&gt;                        &lt;td&gt;name5&lt;/td&gt;                        &lt;td&gt;{{group.e}}&lt;/td&gt;                        &lt;td v-for= "(item,index) in group.cells" :key="index+'ke'"&gt;{{item.ke}}&lt;/td&gt;                                  &lt;/tr&gt;                    &lt;/template&gt;                &lt;/template&gt;                &lt;/tbody&gt;            &lt;/table&gt;        &lt;/section&gt;    &lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CSS样式:</p><pre class="line-numbers language-none"><code class="language-none">#sketchMap {    font-family: "宋体";    padding:0;    margin:0;    h4 {        font-size:27px;        margin:10px;        text-align:center;    }}#sketchTable {    text-align:center;    table {        border: 1px solid #C0C4CC !important;        border-collapse:collapse;        font-size:15px;        margin:20px 0;        th {            border:1.5px solid #C0C4CC;        }        td{            border:1px solid #C0C4CC;            width:100px;        }        td:first-child{            padding-left:5px;            width:130px;            text-align:left;        }        th:nth-child(2),td:nth-child(2) {            text-align: left;        }        th:nth-child(3),td:nth-child(3) {            text-align: left;        }        td:nth-child(2){            padding-left:3px;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图:<br><img src="/img/table2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 自定义table </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> table </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 文章写法</title>
      <link href="2021/05/19/hexo-wen-zhang-xie-fa/"/>
      <url>2021/05/19/hexo-wen-zhang-xie-fa/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1808492017&amp;auto=1&amp;height=66"></iframe><h1 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h1><h2 id="1、字体介绍"><a href="#1、字体介绍" class="headerlink" title="1、字体介绍"></a>1、字体介绍</h2><p><em>这是斜体</em> 或 <em>这也是斜体</em></p><pre class="line-numbers language-none"><code class="language-none">*这是斜体* 或 _这也是斜体_<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这是粗体</strong></p><pre class="line-numbers language-none"><code class="language-none">**这是粗体**<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>这是加粗斜体</strong></em></p><pre class="line-numbers language-none"><code class="language-none">***这是加粗斜体***<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><del>这是删除线</del></p><pre class="line-numbers language-none"><code class="language-none">~~这是删除线~~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><u>带下划线文本</u></p><pre class="line-numbers language-none"><code class="language-none">&lt;u&gt;带下划线文本&lt;/u&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2、分级标题"><a href="#2、分级标题" class="headerlink" title="2、分级标题"></a>2、分级标题</h2><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><pre class="line-numbers language-none"><code class="language-none"># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、超链接"><a href="#3、超链接" class="headerlink" title="3、超链接"></a>3、超链接</h2><p>行内形式：<a href="https://jiuri99.github.io/">我的博客</a></p><pre class="line-numbers language-none"><code class="language-none">行内形式：[我的博客](https://jiuri99.github.io/)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考形式：[我的博客][1]，有一个很好的平台-[简书][2]<br>[1]:<a href="https://jiuri99.github.io/">https://jiuri99.github.io/</a><br>[2]:<a href="http://www.jianshu.com/">http://www.jianshu.com/</a></p><pre class="line-numbers language-none"><code class="language-none">参考形式：[我的博客][1]，有一个很好的平台-[简书][2][1]:https://jiuri99.github.io/[2]:http://www.jianshu.com/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>自动链接：我的博客地址<a href="https://xfbxfbxfb.github.io/">https://xfbxfbxfb.github.io/</a></p><pre class="line-numbers language-none"><code class="language-none">自动链接：我的博客地址&lt;https://jiuri99.github.io/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4、列表"><a href="#4、列表" class="headerlink" title="4、列表"></a>4、列表</h2><p>无序列表：</p><ul><li>无序列表项1</li></ul><ul><li>无序列表项2</li></ul><ul><li>无序列表项3</li></ul><pre class="line-numbers language-none"><code class="language-none">* 无序列表项1+ 无序列表项2- 无序列表项3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有序列表：<br>1.有序列表项1<br>2.有序列表项2<br>3.有序列表项3</p><pre class="line-numbers language-none"><code class="language-none">1.有序列表项12.有序列表项23.有序列表项3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5、插入图片"><a href="#5、插入图片" class="headerlink" title="5、插入图片"></a>5、插入图片</h2><p>在 Hexo 中插入图片，首先需要将图片放在 source/img/ 文件夹下（将本地的路径放入到小括号里），如果用网上的原图的话只需将URL放入到括号里，然后如下方式进行插入：<br>其中方括号是图片描述，圆括号是图片路径<br><img src="https://img0.baidu.com/it/u=233301930,3031623456&amp;fm=11&amp;fmt=auto&amp;gp=0.jpg"></p><pre class="line-numbers language-none"><code class="language-none">![](https://img0.baidu.com/it/u=233301930,3031623456&amp;fm=11&amp;fmt=auto&amp;gp=0.jpg)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本地的需要npm install hexo-renderer-marked安装图片插件，之后在config.yaml中更改配置如下</p><pre class="line-numbers language-none"><code class="language-none">post_asset_folder: truemarked:  prependRoot: true  postAsset: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>之后就可以在使用的 <kbd>![](image.jpg)</kbd>方式愉快的插入图片了。</p><h2 id="6、表格"><a href="#6、表格" class="headerlink" title="6、表格"></a>6、表格</h2><table><thead><tr><th>表头1</th><th align="left">表头2</th><th align="center">表头3</th><th align="right">表头4</th></tr></thead><tbody><tr><td>默认左对齐</td><td align="left">左对齐</td><td align="center">居中对其</td><td align="right">右对齐</td></tr><tr><td>默认左对齐</td><td align="left">左对齐</td><td align="center">居中对其</td><td align="right">右对齐</td></tr><tr><td>默认左对齐</td><td align="left">左对齐</td><td align="center">居中对其</td><td align="right">右对齐</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">表头1|表头2|表头3|表头4-| :- | :-: | -: |默认左对齐|左对齐|居中对其|右对齐默认左对齐|左对齐|居中对其|右对齐默认左对齐|左对齐|居中对其|右对齐<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、分割线"><a href="#7、分割线" class="headerlink" title="7、分割线"></a>7、分割线</h2><p>三个或者三个以上的 - 或者 * 都可以。</p><hr><hr><hr><hr><pre class="line-numbers language-none"><code class="language-none">-------********<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、引用"><a href="#7、引用" class="headerlink" title="7、引用"></a>7、引用</h2><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n个…</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><pre class="line-numbers language-none"><code class="language-none">&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="8、高级技巧"><a href="#8、高级技巧" class="headerlink" title="8、高级技巧"></a>8、高级技巧</h2><p>目前支持的 HTML 元素有&lt;&gt;：kbd b i em sup sub br等 ，如：</p><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><pre class="line-numbers language-none"><code class="language-none">&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转义<br>** 正常显示星号 **</p><pre class="line-numbers language-none"><code class="language-none">\*\* 正常显示星号 \*\*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>目前支持一下符号</p><pre class="line-numbers language-none"><code class="language-none">\   反斜线`   反引号*   星号_   下划线{}  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown基本语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端有价值的博客汇总</title>
      <link href="2021/05/18/you-jie-zhi-de-hui-zong/"/>
      <url>2021/05/18/you-jie-zhi-de-hui-zong/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1814080666&amp;auto=1&amp;height=66"></iframe><h2 id="Web前端有价值的博客汇总"><a href="#Web前端有价值的博客汇总" class="headerlink" title="Web前端有价值的博客汇总"></a>Web前端有价值的博客汇总</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>1.href和src的区别：<a href="https://blog.csdn.net/annsheshira23/article/details/51133709">https://blog.csdn.net/annsheshira23/article/details/51133709</a><br>              <a href="https://www.jianshu.com/p/dadbb8f8a952">https://www.jianshu.com/p/dadbb8f8a952</a></p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>1.深入理解position和z-index属性 ：<a href="https://www.cnblogs.com/zhuzhenwei918/p/6112034.html">https://www.cnblogs.com/zhuzhenwei918/p/6112034.html</a></p><p>2.BFC（清除浮动的原理）：<a href="https://www.cnblogs.com/wuguoyuan/archive/2016/07/23/bfc.html">https://www.cnblogs.com/wuguoyuan/archive/2016/07/23/bfc.html</a></p><p>3.rem和em的解释：<a href="https://www.w3cplus.com/css/rem-vs-em.html">https://www.w3cplus.com/css/rem-vs-em.html</a></p><p>4.css选择器优先级：<a href="https://www.cnblogs.com/zxjwlh/p/6213239.html">https://www.cnblogs.com/zxjwlh/p/6213239.html</a></p><p>5.css hack：<a href="http://blog.csdn.net/dayu9216/article/details/70225261">http://blog.csdn.net/dayu9216/article/details/70225261</a></p><p>6.负边距的作用：<a href="http://blog.csdn.net/u013848401/article/details/52453034">http://blog.csdn.net/u013848401/article/details/52453034</a></p><p>7.圣杯布局和双飞翼布局：<a href="https://www.cnblogs.com/woodk/p/5147085.html">https://www.cnblogs.com/woodk/p/5147085.html</a></p><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><p>1.DOM中Property和Attribute的区别：<a href="http://web.jobbole.com/83129/">http://web.jobbole.com/83129/</a></p><p>2.js在html中加载的顺序（包含了变量提升、函数提升的原理）：<a href="https://www.cnblogs.com/CBDoctor/p/3745246.html">https://www.cnblogs.com/CBDoctor/p/3745246.html</a> (文章写得好，但个人认为有点杂，将不同的知识点都放在了同一个地方)</p><p>3.闭包：<a href="https://www.cnblogs.com/chuntaoj/p/5996216.html">https://www.cnblogs.com/chuntaoj/p/5996216.html</a></p><p>4.HTML元素与事件绑定（分析DOM事件响应的三个阶段，以click事件为例）：<a href="https://my.oschina.net/u/1454562/blog/205010">https://my.oschina.net/u/1454562/blog/205010</a></p><p>5.捕获/阻止捕获、冒泡/阻止冒泡：<a href="https://www.cnblogs.com/zhuzhenwei918/p/6139880.html">https://www.cnblogs.com/zhuzhenwei918/p/6139880.html</a></p><p>6.循环添加事件：<a href="https://www.cnblogs.com/dongdongseven/p/7141146.html">https://www.cnblogs.com/dongdongseven/p/7141146.html</a></p><p>7.event.target与this的区别：<a href="https://www.cnblogs.com/liululin/p/5898787.html">https://www.cnblogs.com/liululin/p/5898787.html</a></p><p>8.caller和callee：<a href="http://blog.csdn.net/laijieyao/article/details/43404953">http://blog.csdn.net/laijieyao/article/details/43404953</a></p><p>9.prototype详解：<a href="http://www.jb51.net/article/91826.htm">http://www.jb51.net/article/91826.htm</a></p><p>10.this指向：<a href="https://www.cnblogs.com/pssp/p/5216085.html">https://www.cnblogs.com/pssp/p/5216085.html</a></p><p>11.JS中函数参数传递方式：<a href="https://www.cnblogs.com/chenwenhao/p/7009606.html">https://www.cnblogs.com/chenwenhao/p/7009606.html</a></p><p>12.typeof用法：<a href="http://blog.csdn.net/z18842589113/article/details/53315910">http://blog.csdn.net/z18842589113/article/details/53315910</a></p><p>13.深拷贝与浅拷贝：<a href="https://www.zhihu.com/question/23031215">https://www.zhihu.com/question/23031215</a></p><p>14.事件委托：<a href="https://www.cnblogs.com/sxz2008/p/6393232.html">https://www.cnblogs.com/sxz2008/p/6393232.html</a></p><p>              <a href="https://www.cnblogs.com/liugang-vip/p/5616484.html">https://www.cnblogs.com/liugang-vip/p/5616484.html</a></p><p>15.bind,call,apply：<a href="https://www.cnblogs.com/libin-1/p/6069031.html">https://www.cnblogs.com/libin-1/p/6069031.html</a></p><p>16.实现继承的方式：<a href="https://www.cnblogs.com/humin/p/4556820.html">https://www.cnblogs.com/humin/p/4556820.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web前端开发学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序开发笔记</title>
      <link href="2020/04/01/xiao-cheng-xu-kai-fa-bi-ji/"/>
      <url>2020/04/01/xiao-cheng-xu-kai-fa-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="小程序分享功能"><a href="#小程序分享功能" class="headerlink" title="小程序分享功能"></a>小程序分享功能</h2><pre class="line-numbers language-none"><code class="language-none">用户点击页面内转发按钮（&lt;button&gt; 组件 open-type="share"）或右上角菜单“转发”按钮的行为，并自定义转发内容。 onShareAppMessage: function (res) {  if (res.from === 'button') {    // 来自页面内转发按钮    console.log(res.target)  } else {    // 来自菜单栏转发按钮    console.log(res.target)  }  return {    title: '自定义转发标题',    path: '/page/user?id=123',    // 设置转发的图片    imageUrl: '../../images/1.jpg',    // 成功的回调    success: (res) =&gt; {},    // 失败的回调    fail: (res) =&gt; {},    // 无论成功与否的回调    complete: (res) =&gt; {}  }}// 小程序点击胶囊按钮分享好友onShareAppMessage(e) {  let path = "/pagesMy2/pages/dealer-center/preview-shop?franchiserUserId=" + this.franchiserUserId  return {    title: this.storeData.storeName,    path: path,    imageUrl: this.storeData.storeLogo  }},// 小程序点击胶囊按钮分享朋友圈onShareTimeline(res) {  let path = "/pagesMy2/pages/dealer-center/preview-shop?franchiserUserId=" + this.franchiserUserId  return {    title: this.storeData.storeName,    path: path,    imageUrl: this.storeData.storeLogo  }},// 小程序点击胶囊按钮收藏onAddToFavorites(res) {  let path = "/pagesMy2/pages/dealer-center/preview-shop?franchiserUserId=" + this.franchiserUserId  return {    title: this.storeData.storeName,    path: path,    imageUrl: this.storeData.storeLogo  }},//小程序的原生菜单中隐藏分享按钮uni.hideShareMenu//小程序的原生菜单中显示分享按钮uni.showShareMenu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小程序下拉刷新功能"><a href="#小程序下拉刷新功能" class="headerlink" title="小程序下拉刷新功能"></a>小程序下拉刷新功能</h2><pre class="line-numbers language-none"><code class="language-none">"enablePullDownRefresh": true  //pages.json style里写上//页面的onPullDownRefresh就可以使用了onPullDownRefresh() {  //下拉获取数据},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 个人整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人整理笔记</title>
      <link href="2020/04/01/ge-ren-zheng-li-bi-ji/"/>
      <url>2020/04/01/ge-ren-zheng-li-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="代码笔记"><a href="#代码笔记" class="headerlink" title="代码笔记"></a>代码笔记</h1><h2 id="强制刷新视图层"><a href="#强制刷新视图层" class="headerlink" title="强制刷新视图层"></a>强制刷新视图层</h2><pre class="line-numbers language-none"><code class="language-none">//数据刷新了，但是视图没有刷新  刷新视图层this.$forceUpdate();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="密码显示部分数字"><a href="#密码显示部分数字" class="headerlink" title="密码显示部分数字"></a>密码显示部分数字</h2><pre class="line-numbers language-none"><code class="language-none">&lt;template v-slot="{row}"&gt;{{getBankNo(row.bankCardNo(银行卡号/身份证等))}}&lt;/template&gt;computed:    getBankNo() {        return function(bankCardNo) {            return bankCardNo.substring(0, 4) + '********' + bankCardNo.substring(bankCardNo.length - 4, bankCardNo.length);    };}//电话data.phone.substring(0,3)+'****'+data.phone.substring(7,11)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数字转大写文字"><a href="#数字转大写文字" class="headerlink" title="数字转大写文字"></a>数字转大写文字</h2><pre class="line-numbers language-none"><code class="language-none">//setAmountUpper(60060)   陆万零陆拾元整setAmountUpper(n, type) {  let fraction = ['角', '分']  let digit = ['零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖']  let unit = [    ['元', '万', '亿'],    ['', '拾', '佰', '仟']  ]  if (type) {    let t = Number(this.updatePriceInfo.productAmount) + Number(this.updatePriceInfo.freight)    n = Math.abs(t)  } else {    n = Math.abs(n)  }  let s = ''  for (let i = 0; i &lt; fraction.length; i++) {    s += (digit[Math.floor((Math.floor(n * 1000 * 10 * Math.pow(10, i)) % (10 * 1000)) / 1000)] + fraction[i])      .replace(/零./, '')  }  s = s || '整'  n = Math.floor(n)  for (let i = 0; i &lt; unit[0].length &amp;&amp; n &gt; 0; i++) {    let p = ''    for (let j = 0; j &lt; unit[1].length &amp;&amp; n &gt; 0; j++) {      p = digit[n % 10] + unit[1][j] + p      n = Math.floor(n / 10)    }    s = p.replace(/(零.)*零$/, '').replace(/^$/, '零') + unit[0][i] + s  }  if (!type) {    return s      .replace(/(零.)*零元/, '元')      .replace(/(零.)+/g, '零')      .replace(/^整$/, '零元整')  } else {    this.upperAmount = s      .replace(/(零.)*零元/, '元')      .replace(/(零.)+/g, '零')      .replace(/^整$/, '零元整')  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><pre class="line-numbers language-none"><code class="language-none">this.memberList = this.filterArr(arr,'key')//方法赋值filterArr(arr, name) {    let hash = {};    return arr.reduce((ss, item) =&gt; {        hash[item[name]] ? '' : hash[item[name]] = true &amp;&amp; ss.push(item);        return ss;    }, []);},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组长度变更"><a href="#数组长度变更" class="headerlink" title="数组长度变更"></a>数组长度变更</h2><pre class="line-numbers language-none"><code class="language-none"> this.newList = this.group(this.list, 4)   //分为4份为一组 group(array, subGroupLength) {    let index = 0;    let newArray = [];    while (index &lt; array.length) {        newArray.push(array.slice(index, index += subGroupLength));    }    return newArray;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="截取字符串，默认显示前30"><a href="#截取字符串，默认显示前30" class="headerlink" title="截取字符串，默认显示前30"></a>截取字符串，默认显示前30</h2><pre class="line-numbers language-none"><code class="language-none">m_substr() {  return function(str = '', len = 30, start = 0) {    if (str.length &gt; len) {      return str.substr(start, len) + '...'    }    return str  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><pre class="line-numbers language-none"><code class="language-none">this.item2.sort(function (a, b) {    var x = 'shopSort'//要排序字段    if (a[x] &lt; b[x]) {        return -1    }    if (a[x] &gt; b[x]) {        return 1    }    return 0;});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hasOwnProperty-判断自身属性与继承属性"><a href="#hasOwnProperty-判断自身属性与继承属性" class="headerlink" title="hasOwnProperty 判断自身属性与继承属性"></a>hasOwnProperty 判断自身属性与继承属性</h2><pre class="line-numbers language-none"><code class="language-none">for (const key in res.data) {    if (this.form.hasOwnProperty(key)) {        this.form['roleIdArray'] = res.data['roleModelList'].map(el =&gt; {return el.id})this.form[key] = res.data[key]}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><pre class="line-numbers language-none"><code class="language-none">// 节流export function throttle(fn,wait = 500,isImmediate = false){  let flag = true;  if(isImmediate){    return function(){      if(flag) {        fn.apply(this,arguments);        flag = false;        setTimeout(() =&gt; {          flag = true        },wait)      }    }  }  return function(){    if(flag == true){      flag = false       setTimeout(() =&gt; {        fn.apply(this,arguments)        flag = true      },wait)    }  }}//使用方法addFarmer: throttle(function (formName) {}, 1000, true),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue-js获得包括今天过去一周（7天）的时间"><a href="#vue-js获得包括今天过去一周（7天）的时间" class="headerlink" title="vue-js获得包括今天过去一周（7天）的时间"></a>vue-js获得包括今天过去一周（7天）的时间</h2><pre class="line-numbers language-none"><code class="language-none">let a=new Date() - 60000*60*24 //获得过去一天的时间//本地时间，当减去时间戳会自动转换为时间戳let b=new Date() - 60000*60*24*7 //获得过去一天的时间const time = new Date(b) //将时间戳转为标准事件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="input限制输入内容"><a href="#input限制输入内容" class="headerlink" title="input限制输入内容"></a>input限制输入内容</h2><p>方法一:</p><pre class="line-numbers language-none"><code class="language-none">//input里面直接加onkeyup="this.value=this.value.replace(/[^\d]/g,'') "<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>方法二:</p><pre class="line-numbers language-none"><code class="language-none">@keyup.native="handleNum($event,1)"//输入框限制handleNum(e,index){    e.target.value = e.target.value.replace(/[^\d]/g,""); //清除“数字”以外的字符    e.target.value = e.target.value.replace(/[^\d.]/g,""); //清除“数字”和“.”以外的字符    e.target.value = e.target.value.replace(/\.{2,}/g,".");//只保留第一个. 清除多余的     e.target.value = e.target.value.replace(".","$#$").replace(/\./g,"").replace("$#$","."); //只允许出现一个.    e.target.value = e.target.value.replace(/^(\-)*(\d+)\.(\d).*$/,'$1$2.$3');//只能输入一个小数     e.target.value = e.target.value.replace(/^(\-)*(\d+)\.(\d\d).*$/,'$1$2.$3');//只能输入两个小数     if(e.target.value.indexOf(".")&lt; 0 &amp;&amp; e.target.value !=""){//以上已经过滤，此处控制的是如果没有小数点，首位不能为类似于 01、02的金额         e.target.value= parseFloat(e.target.value);     }     if(e.target.value =='.'){        e.target.value = '0'+e.target.value    }},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="input失去焦点"><a href="#input失去焦点" class="headerlink" title="input失去焦点"></a>input失去焦点</h2><pre class="line-numbers language-none"><code class="language-none">@blur="blurstorage(value)"//当input失去焦点后返回blurstorage(val){    console.log(val)},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue-count-to数字滚动插件"><a href="#vue-count-to数字滚动插件" class="headerlink" title="vue-count-to数字滚动插件"></a>vue-count-to数字滚动插件</h2><pre class="line-numbers language-none"><code class="language-none">//没有安装的npm install vue-count-to//安装后&lt;template&gt;  &lt;countTo :startVal='startVal' :endVal='endVal' :duration='3000'&gt;&lt;/countTo&gt;&lt;/template&gt;&lt;script&gt;  import countTo from 'vue-count-to';  export default {    components: { countTo },    data () {      return {        startVal: 0,        endVal: 2017      }    }  }&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Animate动画"><a href="#Animate动画" class="headerlink" title="Animate动画"></a>Animate动画</h2><pre class="line-numbers language-none"><code class="language-none">&lt;div class="animated"&gt;&lt;/div&gt;&lt;link rel="stylesheet" href="../../css/animate.min.css"&gt;//鼠标移入animate动画效果$('body').on('mouseenter', '.product-mouse', function () {$(this).addClass('pulse')setTimeout(() =&gt; {$(this).removeClass('pulse')}, 800)})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><kbd><a href="https://www.dowebok.com/demo/2014/98/">Animate.css动画演示</a></kbd></p><h2 id="findindex方法"><a href="#findindex方法" class="headerlink" title="findindex方法"></a>findindex方法</h2><pre class="line-numbers language-none"><code class="language-none">this.form = res.data;const item = this.form.groupId;//一个对象（数字）//this.group是一个数组var index=this.group.findIndex((value)=&gt;value.id==item);//index == -1 没有对象  如果有会换回索引位置if (index == -1 ) {    //没有找到索引位置}else {    //返回索引位置}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时间默认当月01至当日"><a href="#时间默认当月01至当日" class="headerlink" title="时间默认当月01至当日"></a>时间默认当月01至当日</h2><pre class="line-numbers language-none"><code class="language-none">getTime(){    var date = new Date()    var month = parseInt(date.getMonth()+1)    var day = date.getDate()    if(month &lt; 10){ month = '0'+month }    if(day &lt; 10){day = '0'+day}    //当前月的开始  默认为01日    this.listQuery.startTime = date.getFullYear() + '-' + month + '-01'    //当前月当前时间 日期    this.listQuery.endTime = date.getFullYear() + '-' + month + '-' + day    //将时间绑定到时间选择器上    this.betweenDate =[this.listQuery.startTime,this.listQuery.endTime]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h2><pre class="line-numbers language-none"><code class="language-none">{{callinTime}}callinTime: '00 小时 00 分 00 秒',获取到的信息里判断   时间是否为0   不为0执行方法countDown(it) {    // let endTime = new Date(this.actEndTime).getTime();    var interval = setInterval(() =&gt; {    let obj = null;    let calTime = this.data.autoRefundMillisecond; // 如果活动未结束，对时间进行处理    if (calTime &gt; 0) {        let time = calTime / 1000; // 获取天、时、分、秒        let day = parseInt(time / (60 * 60 * 24));        let hou = parseInt((time % (60 * 60 * 24)) / 3600);        let min = parseInt(((time % (60 * 60 * 24)) % 3600) / 60);        let sec = parseInt(((time % (60 * 60 * 24)) % 3600) % 60);        obj = {        day: this.timeFormat(day),        hou: this.timeFormat(hou),        min: this.timeFormat(min),        sec: this.timeFormat(sec)        };    } else {        // 活动已结束，全部设置为'00'        clearInterval(interval);    }    this.data.autoRefundMillisecond = this.data.autoRefundMillisecond - 1000;    this.callinTime = obj.day + '天' + obj.hou + '时' + obj.min + '分' + obj.sec + '秒';    }, 1000);},//将小于10的前面加个0timeFormat(param) {    return param &lt; 10 ? '0' + param : param;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更改时间格式"><a href="#更改时间格式" class="headerlink" title="更改时间格式"></a>更改时间格式</h2><p>将2020-09-04T14:45:27.000+0800 时间格式转化为2020-09-04 14:45:27:</p><pre class="line-numbers language-none"><code class="language-none">getLastTime(val){    return this.getformatDate(val)},getformatDate(data){    var d =new Date(data);    d.month =''+(d.getMonth()+1),    d.day = '' + d.getDate(),    d.year = d.getFullYear();    d.h = '' + d.getHours();    d.m = '' + d.getMinutes();    d.s = '' + d.getSeconds();    if(d.h.length &lt; 2) d.h = '0' + d.h    if(d.m.length &lt; 2) d.m = '0' + d.m;    if (d.s.length &lt; 2) d.s = '0'+ d.s;    if (d.month.length &lt; 2) d.month = '0' + d.month;    if (d.day.length &lt; 2) d.day = '0' + d.day;    return [d.year, d.month, d.day].join('-')+ ' ' +[d.h,d.m,d.s].join(':');}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将2020-09-04 14:45:27时间格式转化为2020-09-04T14:45:27.000+0800:</p><pre class="line-numbers language-none"><code class="language-none">fmtTime (time) {    if (typeof time !== 'string') {        return ' ' // 如果不符合条件,则返回空    }    // 为了适配各种机型,需要把时间转换为符合国际化标准的时间格式,避免iOS和安卓系统不一致    // console.log(time.replace(/-/g, '/'))    let time1 = new Date(time.replace(/-/g, '/').replace('T', ' ')).toISOString() // 转为国际标准化时间    // 截取time前面的年月日    let time2 = time1.split('T')[0]    // 将年月日的‘-’替换为‘/’    let time3 = time2.replace('-', '/')    let time4 = time3.replace('-', '/')    return time1},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="v-charts的基础用法"><a href="#v-charts的基础用法" class="headerlink" title="v-charts的基础用法"></a>v-charts的基础用法</h2><pre class="line-numbers language-none"><code class="language-none">:settings="name方法名"   :extend="name2方法名2"this.name = {     axisSite: { right: ['较上一时段比较'] },    yAxisType: ['KMB', 'percent'],    yAxisName: ['数值','比率']}this.name2 = {    legend: { show: false },  //隐藏legend    series: {    center: ['50%', '50%']},//自定义颜色color: ["rgba(0, 128, 128, 1)", "rgba(247, 77, 97, 1)", "rgba(245, 154, 35, 1)"],//自定义显示数据显示方式tooltip:{    formatter: params =&gt; {        return `存栏量占比&lt;br/&gt;&lt;i class="el-icon-s-help" style="color:${params.color}"&gt;&lt;/i&gt;  ${params.name} : ${params.value} 户 (${params.percent}%)`    },}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axios请求-get"><a href="#axios请求-get" class="headerlink" title="axios请求 get"></a>axios请求 get</h2><pre class="line-numbers language-none"><code class="language-none">import axios from 'axios'import md5 from 'js-md5'import util from '@/libs/util';shareM(id){    this.isShow = true    const uToken = util.cookies.get('uToken')    axios.get('xxx',{    params:{        scene:id,        page:"pagepack/pages/special/detail"    },    headers:{        lCode:"xxx",        sCode:"xxx",        aToken:md5(md5('xxx' + uToken).toUpperCase())    }    }).then(res=&gt;{    this.image = res.request.responseURL    }).catch(err=&gt;{    this.$message.error(err.message)    })}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axios请求-post"><a href="#axios请求-post" class="headerlink" title="axios请求 post"></a>axios请求 post</h2><pre class="line-numbers language-none"><code class="language-none">import axios from 'axios'import md5 from 'js-md5'import {sCode, lCode, secret_key } from '@/utils/config'axios({  method: "post",  url: this.baseURL + "/api-user/api/user/account/pwdUpdate",  data: {data:this.form,uToken:this.uTokenTime},  headers: {    'aToken': md5(md5(secret_key + this.uTokenTime).toUpperCase()),    'lCode': lCode,    'sCode': sCode  }  }).then((res) =&gt; {    // const data = res.data    this.isShow = false    console.log(res,'打印res');  }, err =&gt; {    this.$message.error(err.message)})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="保留n位小数"><a href="#保留n位小数" class="headerlink" title="保留n位小数"></a>保留n位小数</h2><pre class="line-numbers language-none"><code class="language-none">function round(num,n){  if(isNaN(num)) {    return 0  }  const p1 = Math.pow(10,n + 1)  const p2 = Math.pow(10,n)  return Math.round(num * p1 / 10) / p2}console.log(round(2.5395,2),'保留2小数')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计算总价格的封装-并且保留小数"><a href="#计算总价格的封装-并且保留小数" class="headerlink" title="计算总价格的封装 并且保留小数"></a>计算总价格的封装 并且保留小数</h2><pre class="line-numbers language-none"><code class="language-none">class DictArray {  data;  constructor(data){    this.data = data  }  sum(attr, accuracy = 2) {      let res = this.data.filter(item =&gt; item != null)      let ress = attr ? res.reduce((r, item) =&gt; r + Number(item[attr]), 0) : res.reduce((r, item) =&gt; r += Number(item), 0)      return round(ress, accuracy)  }  static $(arr) {      let res = new DictArray(arr)      return res  }}// 总价的数据(例子)let a = [{ age: 1.4444, name: "n1" }, { age: 3.7765, name: "n2" },{age: 4,name: 'n3'}];console.log(DictArray.$(a).sum('age', 2),'总合')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理数组的属性名"><a href="#处理数组的属性名" class="headerlink" title="处理数组的属性名"></a>处理数组的属性名</h2><pre class="line-numbers language-none"><code class="language-none">let arr = ['数据1', '数据2']  let obj = [    [213, 56465],    [21342, 769],  ]/*  处理为：      let ff = [        { '数据1': 213, '数据2': 56465 },        { '数据1': 21342, '数据2': 769 },    ]*/function toHash(array,data) {  // 定义一个空数组 因为 期望数据最层是一个数组  let reslute = []  // 循环传进来的需要处理的数据  data.forEach((item, index) =&gt; {      // 每一次便利都要想这个对象里面添加数据      let obj = {}      // 循环data数据里面的每一项每一项是个数组      item.forEach((val, i) =&gt; {          // obj 对应的属性名对应 array 下标的每一项          obj[array[i]] = val      })      // 根据 data 的下标为每一项添加内层循环处理好的对象      reslute[index] = obj  })  return reslute}console.log(toHash(arr, obj),'处理数组的属性名')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="大写转为小写小写转为大写"><a href="#大写转为小写小写转为大写" class="headerlink" title="大写转为小写小写转为大写"></a>大写转为小写小写转为大写</h2><pre class="line-numbers language-none"><code class="language-none">function fn1(val) {  return val.replace(/[a-zA-Z]/g, config =&gt; {      // config 每一次正则匹配的结果      // charCodeAt a ==65 z ==90 判断是否大小写 config.charCodeAt() &gt;= 65 &amp;&amp; config.charCodeAt() &lt;= 90      // 验证字母大小写：把字母转换为大写，看原来的是否是大写，如果是就转换为小写，不是还是原来      return config.toUpperCase() === config ? config.toLowerCase() : config.toUpperCase()  })}console.log(fn1('sUnZHIhaO'),'大写转为小写小写转为大写')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一维数组转换-tree-结构"><a href="#一维数组转换-tree-结构" class="headerlink" title="一维数组转换 tree 结构"></a>一维数组转换 tree 结构</h2><pre class="line-numbers language-none"><code class="language-none">let arr = [  { id: 1, name: '部门1', pid: 0 },  { id: 2, name: '部门2', pid: 1 },  { id: 3, name: '部门3', pid: 1 },  { id: 4, name: '部门4', pid: 3 },  { id: 5, name: '部门5', pid: 4 },]// 上面的数据转换为 下面的 tree 数据  pid为层级选择的位置 pid若全为0 则全为一级// [//     {//         "id": 1,//         "name": "部门1",//         "pid": 0,//         "children": [//             {//                 "id": 2,//                 "name": "部门2",//                 "pid": 1,//                 "children": []//             },//             {//                 "id": 3,//                 "name": "部门3",//                 "pid": 1,//                 "children": [//                     {//                         id: 4,//                         name: '部门4',//                         pid: 3,//                         "children": [//                             {//                                 id: 5,//                                 name: '部门5',//                                 pid: 4,//                                 "children": []//                             },//                         ]//                     },//                 ]//             }//         ]//     }// ]function tree(items) {  // 1、声明一个数组和一个对象 用来存储数据  let arr = []  let obj = {}  // 2、for of  便利我么传进来的一个数据，给当前的数据添加children 属性为 array 把他放到我们的obj对象里面   for (let item of items) {      obj[item.id] = { ...item, children: [] }  }  // 3、for of  再次便利然后逻辑处理  for (let item of items) {      // 4、把数据里面的id 取出来赋值 方便下一步的操作      let id = item.id      let pid = item.pid      // 5、根据 id  将 obj 里面的每一项数据取出来      let treeitem = obj[id]      // 6、如果是第一项的话 吧treeitem 放到 arr 数组当中      if (pid === 0) {          // 把数据放到 arr 数组里面          arr.push(treeitem)      } else {          // 如果没有 pid 找不到 就开一个 obj { }          if (!obj[pid]) {              obj = {                  children: []              }          }          // 否则给它的 obj 根基 pid（自己定义的下标） 进行查找 它里面的children属性 然后push          obj[pid].children.push(treeitem)      }  }  // 返回处理好的数据  return arr}console.log(tree(arr),'一维数组转换 tree 结构')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="判断两个对象是否相等？"><a href="#判断两个对象是否相等？" class="headerlink" title="判断两个对象是否相等？"></a>判断两个对象是否相等？</h2><pre class="line-numbers language-none"><code class="language-none">function compreObj(obj1, obj2) {  var flag = true;  function compre(obj1, obj2) {    if (Object.keys(obj1).length != Object.keys(obj2).length) {      flag = false;    } else {      for (let x in obj1) {        if (obj2.hasOwnProperty(x)) {          if (obj1[x] !== obj2[x]) {            compre(obj1[x], obj2[x]);          }        } else {          flag = false;        }      }    }    if (flag === false) {      return false;    } else {      return true;    }  }  return compre(obj1, obj2)}//列子：var obj1 = {  userName:'车明强',              age:'56',}let obj2 ={  userName:'车明强',              age:'56',}console.log(compreObj(obj1,obj2),'判断两个对象是否相等');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="手写-indexOf"><a href="#手写-indexOf" class="headerlink" title="手写 indexOf"></a>手写 indexOf</h2><pre class="line-numbers language-none"><code class="language-none">~ function () {    // 在函数前加上波浪号，其作用是把函数声明转换为表达式，    // 就可以直接将下面的代码放入某个函数里运行。    // 不用indexOf 和 includes    function myIndexOf(a) {        // 1、 这个也可以正则实现 下面代码        // let reg = new RegExp(a)        // res = reg.exec(this)        // return res === nu ll ? -1 : res.index        // 这个也可以正则实现        let lena = a.length        y = this.length        flag = -1        if (lena &gt; y) return -1        // 如果输入的字符串大于要检测的字符串直接 -1        for (var i = 0; i &lt;= y - lena; i++) {            if (this.substr(i, lena) === a) {                // substr() 方法可在字符串中抽取从 start 下标开始的指定数目的字符。                flag = i                break            }        }        return flag    }    String.prototype.myIndexOf = myIndexOf}()let demo = 'dwanlghMappaw'let str = 'h'console.log(demo.myIndexOf(str),'手写 indexOf');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据处理对象去重"><a href="#数据处理对象去重" class="headerlink" title="数据处理对象去重"></a>数据处理对象去重</h2><pre class="line-numbers language-none"><code class="language-none">let arrList = [    {        a: 1,        b: 2,        id: 6666    },    {        a: 1,        b: 2,        id: 6666    },    {        a: 6,        b: 8,        id: 77777    },    {        a: 8,        b: 2,        id: 88888    },]/*  @ 输出 :       0: { a: 1, b: 2, id: 6666 }      1: { a: 6, b: 8, id: 77777 }      2: { a: 8, b: 2, id: 88888 }*/function ssff(arr4, id) {  var obj = {};  function deWeightFour() {      arr4 = arr4.reduce(function (a, b) {          obj[b.id] ? '' : obj[b.id] = true &amp;&amp; a.push(b);          return a;      }, [])      return arr4;  }  var newArr4 = deWeightFour();  return newArr4}console.log(ssff(arrList, 'id'),'数据处理对象去重')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组的最大值最小值"><a href="#数组的最大值最小值" class="headerlink" title="数组的最大值最小值"></a>数组的最大值最小值</h2><pre class="line-numbers language-none"><code class="language-none">const array = [5, 4, 7, 8, 9, 2];let num = array.reduce((a, b) =&gt; a &gt; b ? a : b);console.log(num,'最大值') // 9let nums = array.reduce((a, b) =&gt; a &lt; b ? a : b);console.log(nums,'最小值') // 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数字千位分割"><a href="#数字千位分割" class="headerlink" title="数字千位分割"></a>数字千位分割</h2><pre class="line-numbers language-none"><code class="language-none">const format = (n) =&gt; {  let num = n.toString() // 拿到传进来的 number 数字 进行 toString  let len = num.length // 在拿到字符串的长度  // 当传进来的结果小于 3 也就是 千位还把结果返回出去 小于3 不足以分割  if (len &lt; 3) {      return num  } else {      let render = len % 3 //传入 number 的长度 是否能被 3 整除      console.log(render)      /*      match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。      该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。      var str = '123123000'      str.match(/\w{3}/g).join(',') // 123,123,000      */      if (render &gt; 0) { // 说明不是3的整数倍          return num.slice(0, render) + ',' + num.slice(render, len).match(/\d{3}/g).join(',')      } else {          return num.slice(0, len).match(/\d{3}/g).join(',')      }  }}let str2 = format(298000000)console.log(str2,'数字千位分割')  //打印为:298,000,000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><pre class="line-numbers language-none"><code class="language-none">var arrr = {  a: 2,  b: [33]}function cloneDeep(arr = {}) {    // 终止递归 判断如果传进来的数据不是 object 或者 传进来的是一个 null 直接返回    if (!arr || typeof arr != 'object' || arr == null) return arr    // 声明一个对象    let result    // 用 instanceof 判断原型链上是否有该类型的原型 是 Array =&gt; [] ! Arrays =&gt;{}    arr instanceof Array ? result = [] : result = {}    // forin 循环对象的key值    for (const key in arr) {        //  对象 key 赋值 result        result[key] = cloneDeep(arr[key])    }    return result}let arrr2 = cloneDeep(arrr)arrr2.b[0] = 5console.log(arrr);//  {a: 2, b: Array(1)}   Array  a: 2  b: [33]console.log(arrr2);//  {a: 2, b: Array(1)}  Array  a: 2  b: [5]// 修改新对象不影响原来的对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="节流-1"><a href="#节流-1" class="headerlink" title="节流"></a>节流</h2><pre class="line-numbers language-none"><code class="language-none">节流：节流是指如果持续触发某个事件，则每隔n秒执行一次。&lt;button id="button"&gt;手在快3秒执行一次&lt;/button&gt;function throttle(fun, time) {  let flag = 0  return function () {      let now = +new Date().valueOf()      // 当前的值 减去上一次的值 &gt;= 传过来的事件 执行      if (now - flag &gt;= time) {          fun.apply(this, arguments)          flag = now      }  }}button.onclick = throttle((e) =&gt; {  console.log(e,'节流')}, 3000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><pre class="line-numbers language-none"><code class="language-none">防抖：防抖是指在事件触发n秒后再执行回调，如果在n秒内再次被触发，则重新计算时间。防抖： &lt;input id="input" type="text"&gt;// 监听拿到input输入的值input.addEventListener('input', function (e) {  val(e.target.value)})// 防抖的核心代码function fn(time, fun) {  let flag // 定义状态  return function (value) {    clearTimeout(flag)// 在执行之前 清除 定时器的 flag 不让他执行    flag = setTimeout(() =&gt; {        fun(value)    }, time)  }}let val = fn(2000, function (val) {    console.log(val,'防抖')})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 个人整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
